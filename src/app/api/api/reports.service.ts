/**
 * Spaceflight News API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { PaginatedReportList } from '../model/paginatedReportList';
// @ts-ignore
import { Report } from '../model/report';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';


export interface ReportsListRequestParams {
    /** Number of results to return per page. */
    limit?: number;
    /** Search for documents with a news_site__name present in a list of comma-separated values. Case insensitive. */
    newsSite?: string;
    /** Search for documents with a news_site__name not present in a list of comma-separated values. Case insensitive. */
    newsSiteExclude?: string;
    /** The initial index from which to return the results. */
    offset?: number;
    /** Order the result on &#x60;published_at, -published_at, updated_at, -updated_at&#x60;.  * &#x60;published_at&#x60; - Published at * &#x60;-published_at&#x60; - Published at (descending) * &#x60;updated_at&#x60; - Updated at * &#x60;-updated_at&#x60; - Updated at (descending) */
    ordering?: Array<'-published_at' | '-updated_at' | 'published_at' | 'updated_at'>;
    /** Get all documents published after a given ISO8601 timestamp (excluded). */
    publishedAtGt?: string;
    /** Get all documents published after a given ISO8601 timestamp (included). */
    publishedAtGte?: string;
    /** Get all documents published before a given ISO8601 timestamp (excluded). */
    publishedAtLt?: string;
    /** Get all documents published before a given ISO8601 timestamp (included). */
    publishedAtLte?: string;
    /** Search for documents with a specific phrase in the title or summary. */
    search?: string;
    /** Search for all documents with a specific phrase in the summary. */
    summaryContains?: string;
    /** Search for documents with a summary containing all keywords from comma-separated values. */
    summaryContainsAll?: string;
    /** Search for documents with a summary containing at least one keyword from comma-separated values. */
    summaryContainsOne?: string;
    /** Search for all documents with a specific phrase in the title. */
    titleContains?: string;
    /** Search for documents with a title containing all keywords from comma-separated values. */
    titleContainsAll?: string;
    /** Search for documents with a title containing at least one keyword from comma-separated values. */
    titleContainsOne?: string;
    /** Get all documents updated after a given ISO8601 timestamp (excluded). */
    updatedAtGt?: string;
    /** Get all documents updated after a given ISO8601 timestamp (included). */
    updatedAtGte?: string;
    /** Get all documents updated before a given ISO8601 timestamp (excluded). */
    updatedAtLt?: string;
    /** Get all documents updated before a given ISO8601 timestamp (included). */
    updatedAtLte?: string;
}

export interface ReportsRetrieveRequestParams {
    /** A unique integer value identifying this report. */
    id: number;
}


@Injectable({
  providedIn: 'root'
})
export class ReportsService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportsList(requestParameters?: ReportsListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedReportList>;
    public reportsList(requestParameters?: ReportsListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedReportList>>;
    public reportsList(requestParameters?: ReportsListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedReportList>>;
    public reportsList(requestParameters?: ReportsListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const limit = requestParameters?.limit;
        const newsSite = requestParameters?.newsSite;
        const newsSiteExclude = requestParameters?.newsSiteExclude;
        const offset = requestParameters?.offset;
        const ordering = requestParameters?.ordering;
        const publishedAtGt = requestParameters?.publishedAtGt;
        const publishedAtGte = requestParameters?.publishedAtGte;
        const publishedAtLt = requestParameters?.publishedAtLt;
        const publishedAtLte = requestParameters?.publishedAtLte;
        const search = requestParameters?.search;
        const summaryContains = requestParameters?.summaryContains;
        const summaryContainsAll = requestParameters?.summaryContainsAll;
        const summaryContainsOne = requestParameters?.summaryContainsOne;
        const titleContains = requestParameters?.titleContains;
        const titleContainsAll = requestParameters?.titleContainsAll;
        const titleContainsOne = requestParameters?.titleContainsOne;
        const updatedAtGt = requestParameters?.updatedAtGt;
        const updatedAtGte = requestParameters?.updatedAtGte;
        const updatedAtLt = requestParameters?.updatedAtLt;
        const updatedAtLte = requestParameters?.updatedAtLte;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>newsSite, 'news_site');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>newsSiteExclude, 'news_site_exclude');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');
        if (ordering) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...ordering].join(COLLECTION_FORMATS['csv']), 'ordering');
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>publishedAtGt, 'published_at_gt');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>publishedAtGte, 'published_at_gte');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>publishedAtLt, 'published_at_lt');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>publishedAtLte, 'published_at_lte');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>search, 'search');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>summaryContains, 'summary_contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>summaryContainsAll, 'summary_contains_all');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>summaryContainsOne, 'summary_contains_one');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>titleContains, 'title_contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>titleContainsAll, 'title_contains_all');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>titleContainsOne, 'title_contains_one');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>updatedAtGt, 'updated_at_gt');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>updatedAtGte, 'updated_at_gte');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>updatedAtLt, 'updated_at_lt');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>updatedAtLte, 'updated_at_lte');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v4/reports/`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<PaginatedReportList>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportsRetrieve(requestParameters: ReportsRetrieveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Report>;
    public reportsRetrieve(requestParameters: ReportsRetrieveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Report>>;
    public reportsRetrieve(requestParameters: ReportsRetrieveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Report>>;
    public reportsRetrieve(requestParameters: ReportsRetrieveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling reportsRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v4/reports/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Report>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
