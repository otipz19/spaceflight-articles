/**
 * Spaceflight News API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { Blog } from '../model/blog';
// @ts-ignore
import { PaginatedBlogList } from '../model/paginatedBlogList';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class BlogsService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * @param event Search for all documents related to a specific event using its Launch Library 2 ID.
     * @param hasEvent Get all documents that have a related event.
     * @param hasLaunch Get all documents that have a related launch.
     * @param isFeatured Get all documents that are featured.
     * @param launch Search for all documents related to a specific launch using its Launch Library 2 ID.
     * @param limit Number of results to return per page.
     * @param newsSite Search for documents with a news_site__name present in a list of comma-separated values. Case insensitive.
     * @param newsSiteExclude Search for documents with a news_site__name not present in a list of comma-separated values. Case insensitive.
     * @param offset The initial index from which to return the results.
     * @param ordering Order the result on &#x60;published_at, -published_at, updated_at, -updated_at&#x60;.  * &#x60;published_at&#x60; - Published at * &#x60;-published_at&#x60; - Published at (descending) * &#x60;updated_at&#x60; - Updated at * &#x60;-updated_at&#x60; - Updated at (descending)
     * @param publishedAtGt Get all documents published after a given ISO8601 timestamp (excluded).
     * @param publishedAtGte Get all documents published after a given ISO8601 timestamp (included).
     * @param publishedAtLt Get all documents published before a given ISO8601 timestamp (excluded).
     * @param publishedAtLte Get all documents published before a given ISO8601 timestamp (included).
     * @param search Search for documents with a specific phrase in the title or summary.
     * @param summaryContains Search for all documents with a specific phrase in the summary.
     * @param summaryContainsAll Search for documents with a summary containing all keywords from comma-separated values.
     * @param summaryContainsOne Search for documents with a summary containing at least one keyword from comma-separated values.
     * @param titleContains Search for all documents with a specific phrase in the title.
     * @param titleContainsAll Search for documents with a title containing all keywords from comma-separated values.
     * @param titleContainsOne Search for documents with a title containing at least one keyword from comma-separated values.
     * @param updatedAtGt Get all documents updated after a given ISO8601 timestamp (excluded).
     * @param updatedAtGte Get all documents updated after a given ISO8601 timestamp (included).
     * @param updatedAtLt Get all documents updated before a given ISO8601 timestamp (excluded).
     * @param updatedAtLte Get all documents updated before a given ISO8601 timestamp (included).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blogsList(event?: Array<number>, hasEvent?: boolean, hasLaunch?: boolean, isFeatured?: boolean, launch?: Array<string>, limit?: number, newsSite?: string, newsSiteExclude?: string, offset?: number, ordering?: Array<'-published_at' | '-updated_at' | 'published_at' | 'updated_at'>, publishedAtGt?: string, publishedAtGte?: string, publishedAtLt?: string, publishedAtLte?: string, search?: string, summaryContains?: string, summaryContainsAll?: string, summaryContainsOne?: string, titleContains?: string, titleContainsAll?: string, titleContainsOne?: string, updatedAtGt?: string, updatedAtGte?: string, updatedAtLt?: string, updatedAtLte?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedBlogList>;
    public blogsList(event?: Array<number>, hasEvent?: boolean, hasLaunch?: boolean, isFeatured?: boolean, launch?: Array<string>, limit?: number, newsSite?: string, newsSiteExclude?: string, offset?: number, ordering?: Array<'-published_at' | '-updated_at' | 'published_at' | 'updated_at'>, publishedAtGt?: string, publishedAtGte?: string, publishedAtLt?: string, publishedAtLte?: string, search?: string, summaryContains?: string, summaryContainsAll?: string, summaryContainsOne?: string, titleContains?: string, titleContainsAll?: string, titleContainsOne?: string, updatedAtGt?: string, updatedAtGte?: string, updatedAtLt?: string, updatedAtLte?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedBlogList>>;
    public blogsList(event?: Array<number>, hasEvent?: boolean, hasLaunch?: boolean, isFeatured?: boolean, launch?: Array<string>, limit?: number, newsSite?: string, newsSiteExclude?: string, offset?: number, ordering?: Array<'-published_at' | '-updated_at' | 'published_at' | 'updated_at'>, publishedAtGt?: string, publishedAtGte?: string, publishedAtLt?: string, publishedAtLte?: string, search?: string, summaryContains?: string, summaryContainsAll?: string, summaryContainsOne?: string, titleContains?: string, titleContainsAll?: string, titleContainsOne?: string, updatedAtGt?: string, updatedAtGte?: string, updatedAtLt?: string, updatedAtLte?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedBlogList>>;
    public blogsList(event?: Array<number>, hasEvent?: boolean, hasLaunch?: boolean, isFeatured?: boolean, launch?: Array<string>, limit?: number, newsSite?: string, newsSiteExclude?: string, offset?: number, ordering?: Array<'-published_at' | '-updated_at' | 'published_at' | 'updated_at'>, publishedAtGt?: string, publishedAtGte?: string, publishedAtLt?: string, publishedAtLte?: string, search?: string, summaryContains?: string, summaryContainsAll?: string, summaryContainsOne?: string, titleContains?: string, titleContainsAll?: string, titleContainsOne?: string, updatedAtGt?: string, updatedAtGte?: string, updatedAtLt?: string, updatedAtLte?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (event) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...event].join(COLLECTION_FORMATS['csv']), 'event');
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>hasEvent, 'has_event');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>hasLaunch, 'has_launch');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>isFeatured, 'is_featured');
        if (launch) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...launch].join(COLLECTION_FORMATS['csv']), 'launch');
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>newsSite, 'news_site');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>newsSiteExclude, 'news_site_exclude');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');
        if (ordering) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...ordering].join(COLLECTION_FORMATS['csv']), 'ordering');
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>publishedAtGt, 'published_at_gt');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>publishedAtGte, 'published_at_gte');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>publishedAtLt, 'published_at_lt');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>publishedAtLte, 'published_at_lte');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>search, 'search');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>summaryContains, 'summary_contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>summaryContainsAll, 'summary_contains_all');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>summaryContainsOne, 'summary_contains_one');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>titleContains, 'title_contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>titleContainsAll, 'title_contains_all');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>titleContainsOne, 'title_contains_one');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>updatedAtGt, 'updated_at_gt');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>updatedAtGte, 'updated_at_gte');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>updatedAtLt, 'updated_at_lt');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>updatedAtLte, 'updated_at_lte');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v4/blogs/`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<PaginatedBlogList>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id A unique integer value identifying this blog.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blogsRetrieve(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Blog>;
    public blogsRetrieve(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Blog>>;
    public blogsRetrieve(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Blog>>;
    public blogsRetrieve(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling blogsRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v4/blogs/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Blog>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
